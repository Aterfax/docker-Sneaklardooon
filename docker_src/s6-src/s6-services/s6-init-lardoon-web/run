#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# Define a logging function to prefix output to the docker logs.
output_to_log() {
    sed  's/^/[s6-init-lardoon-web] /'
}
export -f output_to_log

# Define a function that allows further output to be logged to terminal when environment variable DEBUG=true
debug_function() {
    if [[ "${DEBUG,,}" == "true" || "${DEBUG,,}" == "1" ]]; then
        "$@"
    fi
}
export -f debug_function

# Define a function that sets a variable based on the environment variable if set or a provided default value
set_variable() {
  local env_var_name="$1"
  local default_value="$2"

  # Check if the environment variable is set and not empty
  if [ -n "${!env_var_name}" ]; then
    local value="${!env_var_name}"
  else
    local value="$default_value"
  fi

  # Echo the value
  echo "$value"
}
export -f set_variable

# Ensure app binaries are available to execute.
export PATH=/app/:$PATH

# Set user tweakable variables 
lardoon_db_name=$(set_variable "LARDOON_DB_NAME" "lardoon.db")
bind_ip=$(set_variable "LARDOON_BIND_IP" "0.0.0.0")
port=$(set_variable "LARDOON_PORT" "3883")
timeout=$(set_variable "LARDOON_WEB_TIMEOUT" "30")
lardoon_daemon_wait_time_period=$(set_variable "LARDOON_DAEMON_WAIT_TIME_PERIOD" "30")
tacview_directory=$(set_variable "TACVIEW_FOLDER" "/tacview")

# Set non-tweakable variables
lardoon_config_directory="/config/lardoon"
lardoon_serve_startup_iterator=1
lardoon_daemon_startup_iterator=1
lardoon_serve_restarts=0
lardoon_daemon_restarts=0
service_check_url="http://localhost:"${port}
bind_address=${bind_ip}":"${port}

debug_function env | output_to_log

# Create the config directory if it does not exist
mkdir -p "$lardoon_config_directory"

# Create the tacview directory if it does not exist
mkdir -p "$tacview_directory"

# Ensure that the app and config folders are owned by the user from the container.
lsiown abc:users /app/lardoon | output_to_log
lsiown -R abc:users "$lardoon_config_directory" | output_to_log
lsiown -R abc:users "$tacview_directory" | output_to_log

# Check if the executable exists.
if [ ! -e "/app/lardoon" ]; then
    echo "Lardoon executable not found. Exiting." | output_to_log
    exit 1
fi

# Change to the specified working directory
cd "$lardoon_config_directory" || exit 1

while true; do
lardoon_serve_pid=""
lardoon_daemon_pid=""

    if [ $lardoon_serve_startup_iterator -eq 1 ]; then
        echo "Starting Lardoon Web Service on $bind_address" | output_to_log
        s6-setuidgid abc bash -c "/app/lardoon --db $lardoon_config_directory/$lardoon_db_name serve --bind $bind_address 2>&1 | output_to_log" &
        lardoon_serve_pid=$! # This grabs the PID of the running lardoon process and keeps it for later if needed.
        echo "Lardoon Web Service PID="$lardoon_serve_pid | output_to_log
        sleep $timeout # Give the web service a moment to start up.
    fi

    if [ $lardoon_daemon_startup_iterator -eq 1 ]; then
        echo "Starting Lardoon import Daemon" | output_to_log
        s6-setuidgid abc bash -c "/app/lardoon --db $lardoon_config_directory/$lardoon_db_name daemon -p $tacview_directory -t $lardoon_daemon_wait_time_period 2>&1 | output_to_log" &
        lardoon_daemon_pid=$! # This grabs the PID of the running lardoon process and keeps it for later if needed.
        echo "Lardoon Daemon PID="$lardoon_daemon_pid | output_to_log
        sleep $timeout # Give the daemon a moment to start up.
    fi

    while true; do
        # Check if the Lardoon web service is responding with curl
        if curl --max-time 10 -s -o /dev/null "$service_check_url"; then
            debug_function echo "############### Lardoon Web Service is responding. ###############" $(date +"%d-%m-%y-%T") | output_to_log
            sleep $((timeout / 2)) # This is half because we have two checks ¯_(ツ)_/¯
        else
            debug_function echo "############### Lardoon Web Service is not responding. Restarting... ###############" $(date +"%d-%m-%y-%T") | output_to_log
            debug_function echo "############### Lardoon Web Service restart counter = $lardoon_serve_restarts ###############" $(date +"%d-%m-%y-%T") | output_to_log
            kill -9 "$lardoon_serve_pid"  # Kill the background process (Use the stored PID.)
            lardoon_serve_startup_iterator=1
            lardoon_serve_restarts=$((lardoon_serve_restarts + 1))
            break
        fi

        # Check if the Lardoon daemon is still running.
        if ps -p "$lardoon_daemon_pid" > /dev/null; then
            debug_function echo "############### Lardoon import Daemon is running. ###############" | output_to_log
            sleep $((timeout / 2)) # This is half because we have two checks ¯_(ツ)_/¯
        else
            debug_function echo "############### Lardoon import Daemon is not running. Restarting! ###############" | output_to_log
            lardoon_daemon_startup_iterator=1
            lardoon_daemon_restarts=$((lardoon_daemon_restarts + 1))
        fi
    done
done